===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\db.js ===== 
import mysql from "mysql";

export const db = mysql.createConnection({
    host:"localhost",
    user:"root",
    port:3306,
    password:"password",
    database:"blogApp"
})
===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\index.js ===== 
import express from "express";
import authRoute from "./routes/auth.js"
import userRoute from "./routes/users.js"
import postRoute from "./routes/posts.js"
import cors from "cors"
import cookieParser from "cookie-parser";

const app = express();
app.use(cookieParser())

app.use(cors())
app.use(express.json())
app.use("/api/auth",authRoute)
app.use("/api/users",userRoute)
app.use("/api/posts",postRoute)





app.listen(8080,()=>{
    console.log("------> Server Running");
})


===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\controllers\auth.js ===== 
import { db } from "../db.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";




export const register = (req, res) => {
  // CHECK EXISTING USER

  const qry = "SELECT * FROM users WHERE email =? OR  username = ?";

  db.query(qry, [req.body.email, req.body.username], (err, result) => {
    if (err) return res.json(err);
    if (result.length) return res.status(409).json("User Already Exists");
    const salt = bcrypt.genSaltSync(10);
    const hashedPassword = bcrypt.hashSync(req.body.password, salt);



    const registerQuery = "INSERT INTO users(`username`,`email`,`password`) VALUES (?)";
    const values=[
      req.body.username,
      req.body.email,
      hashedPassword
    ]
  
    db.query(registerQuery,[values],(err,data)=>{
      if(err) return res.json(err)
      return res.status(200).json("User Registered")
    })


  });

 

};

export const login = (req, res) => {

  // CHECK USER EXISTS
  const checkUserIfExists = "SELECT * FROM users WHERE username=?";
  db.query(checkUserIfExists,[req.body.username],(err,data)=>{
     if(err) return res.json(err)
     if(data.length===0){
      return res.status(404).json("User Not Found");
     }

     //Check Password
     const isPasswordCorrect = bcrypt.compareSync(req.body.password, data[0].password); // true
     if(!isPasswordCorrect) return res.status(400).json("Wrong Username Or Password")


     const token = jwt.sign({id:data[0].id},"jwtkey");
     const {password,...other} =data[0]



     res.cookie("access_token",token,{
      httpOnly:true
     }).status(200).json(other)

  })

};

export const logout = (req, res) => {

  res.clearCookie('access_token',{

  }).status(200).json("Logged Out Successfully !")
};
.
===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\controllers\post.js ===== 
import {db} from "../db.js"
import jwt from "jsonwebtoken";

export const getAllPosts=(req,res)=>{

    const getAllPostQuery = req.query.cat ? "SELECT * FROM posts WHERE category=?":"SELECT * FROM posts";
    db.query(getAllPostQuery,[req.query.cat],(err,data)=>{
        if(err) return res.json(err)
        return res.status(200).json(data)
    })
}


export const getSinglePost=(req,res)=>{
    
    const q =  "SELECT `username`,`title`,`desc`,p.img,`category`,`date` FROM users u JOIN posts p ON u.id=p.uid WHERE p.id=?";

    db.query(q,[req.params.id],(err,data)=>{
        if(err) return res.json(err);
        return res.status(200).json(data[0])
    })
}


export const addPost=(req,res)=>{


        const postId = req.params.id;
        const values = [
            req.body.title,
            req.body.desc,
            req.body.img,
            req.body.date,
            req.body.uid,
            req.body.category
        ]

        const q ="INSERT INTO `posts` ( `title`, `desc`, `img`, `date`, `uid`, `category`) VALUES (?)"
        db.query(q,[values],(err,data)=>{
            if(err) return res.status(403).json(err)

            return res.json("Post Added")


        // })
    })
}


export const updatePost=(req,res)=>{

console.log("-----> UPDATE POST <-----");
const token = req.cookies.access_token
console.log("----->",token);

    if(!token) return res.json("Not Authenticated");
    jwt.verify(authToken,"jwtkey",(err,userInfo)=>{
        if(err) return console.log("JWT Token is Not Valid")
        console.log("token genuine");
    })


    const postId = req.params.id;
    const values = [
        req.body.title,
        req.body.desc,
        req.body.img,

    ]

    const q ="UPDATE posts SET `title`=?, `desc`=?, `img`=?  WHERE id=?"
    db.query(q,[...values,postId],(err,data)=>{
        if(err) return res.status(403).json(err)
        return res.json("Post Updated")

})
}


export const deletePost=(req,res)=>{
    const token = req.cookies.access_token
    if(!token) return res.json("Not Authenticated");
    jwt.verify(token,"jwtkey",(err,userInfo)=>{
        if(err) return res.status(403).json("JWT Token is Not Valid")

        const postId = req.params.id;
        const q ="DELETE FROM posts WHERE `id`=? AND `uid`=?"

        db.query(q,[postId,userInfo.id],(err,data)=>{
            if(err) return res.status(403).json("You can delete only your post !")

            return res.json("Post Deleted")


        })
    })
}.
===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\controllers\user.js ===== 
.
===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\routes\auth.js ===== 
import express from "express";
import { login, logout, register } from "../controllers/auth.js";
const router = express.Router();
    

router.post("/register",register)
router.post("/login",login)
router.post("/logout",logout)

export default router.
===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\routes\posts.js ===== 
import express from "express";
import { addPost, deletePost, getAllPosts, getSinglePost, updatePost } from "../controllers/post.js";
const router = express.Router();
    
router.get("/",getAllPosts )
router.get("/:id",getSinglePost )
router.post("/",addPost )
router.delete("/:id",deletePost )
router.put("/:id",updatePost )


export default router.
===== E:\0other imp\SideProjects\blogging_project\React-MySQL-Blog-App\Server\routes\users.js ===== 
import express from "express";
const router = express.Router();
    


export default router.
